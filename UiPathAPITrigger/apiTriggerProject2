import requests
import json
import urllib3

# Suppress SSL warnings for local testing.
# In a production environment, configure proper SSL certificate verification.
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ====== Configuration ======

# The full slug URL for your UiPath API Trigger.
# This must EXACTLY match the URL for your API Trigger with the 'apiTrigerproject1' slug and GET verb.

full_slug_url = "https://cloud.uipath.com/arunscyajohg/DefaultTenant/orchestrator_/t/02a09cf6-276d-4a77-9fa2-5cfadf3395ba/apiTrigerproject2" #

# Replace with your actual Personal Access Token (Bearer Token).
# Ensure this token has 'Orchestrator API Access' -> 'Triggers.Read' permission.
bearer_token = "rt_36324E27701546D8A19F77D37598A6783C1820704760AF3B43BDD72E4B10FC69-1"

# ====== Headers ======
headers = {
    "Authorization": f"Bearer {bearer_token}",
    # Content-Type header should NOT be present for GET requests as per previous error.
    # It will cause a 400 Bad Request.
}

# ====== Make GET Request to Trigger Bot ======
try:
    print(f"Attempting to trigger bot via slug URL")
    # print(f"With headers: {headers}")

    # Make the GET request.
    # A short timeout is generally fine as it's a "fire and forget" trigger.
    response = requests.get(full_slug_url, headers=headers, verify=False, timeout=10)

    # ====== Handle the Response ======
    if response.status_code == 200:
        print("\nRobot process initiated successfully! Status Code: 200 OK.")
        print("This indicates the trigger was accepted by Orchestrator.")
        # The response from a slug URL might be an empty JSON object or a simple success message.
        # try:
        #     response_json = response.json()
        #     if response_json: # Check if JSON is not empty
        #         print("Response JSON:", json.dumps(response_json, indent=2))
        #     else:
        #         print("Response was an empty JSON object or unparseable as JSON.")
        #         print("Response Text (raw):", response.text)
        # except json.JSONDecodeError:
        #     print("Response was not JSON or empty.")
        #     print("Response Text (raw):", response.text)
    else:
        print(f"Failed to trigger robot. Unexpected Status Code: {response.status_code}")
        print("Response Text:", response.text) # Print the actual response content for debugging

except requests.exceptions.Timeout:
    print("The request timed out. Network connection might be slow or blocked, or Orchestrator is unresponsive.")
except requests.exceptions.ConnectionError as ce:
    print(f"A connection error occurred (e.g., DNS failure, refused connection): {ce}")
except requests.exceptions.RequestException as e:
    print(f"An unexpected request error occurred: {e}")